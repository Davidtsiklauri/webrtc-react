{"ast":null,"code":"var _jsxFileName = \"/Users/davidt/Desktop/Personall Stuff/Projects/webrtc-react/src/App.tsx\";\nimport React, { createRef } from 'react';\nimport { Video } from './components/Video';\nimport { userMedia } from './utils/mediaHelper';\n\nfunction App() {\n  const videoRef = createRef();\n\n  (async () => {\n    const stream = await userMedia.getUserMedia();\n\n    if (videoRef.current) {\n      const {\n        current\n      } = videoRef;\n      current.srcObject = stream;\n      current.play();\n    }\n  })(); // const signalingChannel = new SignalingChannel(remoteClientId);\n  // signalingChannel.addEventListener('message', message => {\n  // });\n  // signalingChannel.send('Hello!');\n\n\n  const makeCall = async () => {\n    console.log('in Make Call');\n    const configuration = {\n      iceServers: [{\n        urls: 'stun:stun.l.google.com:19302'\n      }]\n    };\n    const peerConnection = new RTCPeerConnection(configuration); // signalingChannel.addEventListener('message', async message => {\n    //     if (message.answer) {\n    //         const remoteDesc = new RTCSessionDescription(message.answer);\n    //         await peerConnection.setRemoteDescription(remoteDesc);\n    //     }\n    // });\n\n    const offer = await peerConnection.createOffer();\n    await peerConnection.setLocalDescription(offer); // signalingChannel.send({'offer': offer});\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Video, {\n    ref: videoRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: makeCall,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }\n  }, \"Make A Call\"));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/davidt/Desktop/Personall Stuff/Projects/webrtc-react/src/App.tsx"],"names":["React","createRef","Video","userMedia","App","videoRef","stream","getUserMedia","current","srcObject","play","makeCall","console","log","configuration","iceServers","urls","peerConnection","RTCPeerConnection","offer","createOffer","setLocalDescription"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,KAAT,QAAsB,oBAAtB;AACA,SAASC,SAAT,QAA0B,qBAA1B;;AAEA,SAASC,GAAT,GAAe;AACb,QAAMC,QAAQ,GAAGJ,SAAS,EAA1B;;AACA,GAAC,YAAY;AACX,UAAMK,MAAmB,GAAG,MAAMH,SAAS,CAACI,YAAV,EAAlC;;AACA,QAAIF,QAAQ,CAACG,OAAb,EAAsB;AACpB,YAAM;AAAEA,QAAAA;AAAF,UAAcH,QAApB;AACAG,MAAAA,OAAO,CAACC,SAAR,GAAoBH,MAApB;AACAE,MAAAA,OAAO,CAACE,IAAR;AACD;AACF,GAPD,IAFa,CAWb;AACA;AACA;AAEA;;;AAEA,QAAMC,QAAQ,GAAG,YAAY;AAC3BC,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AAEA,UAAMC,aAAa,GAAG;AAAEC,MAAAA,UAAU,EAAE,CAAC;AAAEC,QAAAA,IAAI,EAAE;AAAR,OAAD;AAAd,KAAtB;AACA,UAAMC,cAAc,GAAG,IAAIC,iBAAJ,CAAsBJ,aAAtB,CAAvB,CAJ2B,CAK3B;AACA;AACA;AACA;AACA;AACA;;AACA,UAAMK,KAAK,GAAG,MAAMF,cAAc,CAACG,WAAf,EAApB;AACA,UAAMH,cAAc,CAACI,mBAAf,CAAmCF,KAAnC,CAAN,CAZ2B,CAa3B;AACD,GAdD;;AAgBA,sBACE,uDACE,oBAAC,KAAD;AAAO,IAAA,GAAG,EAAEd,QAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAEE;AAAQ,IAAA,OAAO,EAAEM,QAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAFF,CADF;AAMD;;AAED,eAAeP,GAAf","sourcesContent":["import React, { createRef } from 'react';\nimport { Video } from './components/Video';\nimport { userMedia } from './utils/mediaHelper';\n\nfunction App() {\n  const videoRef = createRef() as React.RefObject<HTMLVideoElement>;\n  (async () => {\n    const stream: MediaStream = await userMedia.getUserMedia();\n    if (videoRef.current) {\n      const { current } = videoRef;\n      current.srcObject = stream;\n      current.play();\n    }\n  })();\n\n  // const signalingChannel = new SignalingChannel(remoteClientId);\n  // signalingChannel.addEventListener('message', message => {\n  // });\n\n  // signalingChannel.send('Hello!');\n\n  const makeCall = async () => {\n    console.log('in Make Call');\n\n    const configuration = { iceServers: [{ urls: 'stun:stun.l.google.com:19302' }] };\n    const peerConnection = new RTCPeerConnection(configuration);\n    // signalingChannel.addEventListener('message', async message => {\n    //     if (message.answer) {\n    //         const remoteDesc = new RTCSessionDescription(message.answer);\n    //         await peerConnection.setRemoteDescription(remoteDesc);\n    //     }\n    // });\n    const offer = await peerConnection.createOffer();\n    await peerConnection.setLocalDescription(offer);\n    // signalingChannel.send({'offer': offer});\n  };\n\n  return (\n    <>\n      <Video ref={videoRef} />\n      <button onClick={makeCall}>Make A Call</button>\n    </>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}